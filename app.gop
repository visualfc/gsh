package gsh

import (
	"bytes"
	"io"
	"os"
	"os/exec"
)

// App is project class of this classfile.
type App struct {
	fout io.Writer
	ferr io.Writer
	fin  io.Reader
	cout string
	err  error
}

func (p *App) initApp() {
	p.fin = os.Stdin
	p.fout = os.Stdout
	p.ferr = os.Stderr
}

// Gop_Exec executes a shell command.
func (p *App) Gop_Exec(name string, args ...string) error {
	cmd := exec.Command(name, args...)
	cmd.Stdin = p.fin
	cmd.Stdout = p.fout
	cmd.Stderr = p.ferr
	p.err = cmd.Run()
	return p.err
}

// LastErr returns error of last command execution.
func (p *App) LastErr() error {
	return p.err
}

// Capout captures stdout of doSth() execution and save it to output.
func (p *App) Capout(doSth func()) (string, error) {
	var out bytes.Buffer
	old := p.fout
	p.fout = &out
	defer func() {
		p.fout = old
	}()
	doSth
	p.cout = out.string
	return p.cout, p.err
}

// Output returns result of last capout.
func (p *App) Output() string {
	return p.cout
}

// Gopt_App_Main is main entry of this classfile.
func Gopt_App_Main(a interface{ initApp() }) {
	a.initApp
	if app, ok := a.(interface{ MainEntry() }); ok {
		app.mainEntry
	}
}
